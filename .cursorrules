# Cursor AI Rules
# Read context from autocoding/context.md
CONTEXT_ROOT="autocoding/context.md"
PATTERNS="autocoding/patterns.md"
RULES="autocoding/rules.md"
BACKEND="autocoding/backend/ai.md"
FRONTEND="autocoding/frontend/ai.md"

## Overview
The AI Timetable is a module-based system leveraging RESTful APIs to facilitate automated scheduling. The system includes user authentication, role management, and timetable generation while ensuring scalability across multiple organizations.

## Documentation Index
- [Architecture Overview](./autocoding/architecture.md)
- [Module Documentation](./autocoding/modules/)
- [API Documentation](./autocoding/api/)
- [Frontend Documentation](./autocoding/frontend/)
- [Database Schema](./autocoding/database/)
- [Development Guides](./autocoding/guides/)

## Key Modules & Features
- **Auth Module**: JWT and OAuth authentication, secure user sessions
- **User Module**: Profile management with role-based permissions
- **Admin Module**: Organization management and system monitoring
- **Teacher Module**: Teacher scheduling with complex constraints
- **Student Module**: Student profiles and class enrollment
- **Subject Module**: Subject definition and conflict management
- **Class Module**: Class binding and scheduling rules
- **Room Module**: Room allocation and availability tracking
- **Timetable Module**: AI-powered schedule optimization
- **Notification Module**: Multi-channel alerts and updates

## Module Relationships
- **Auth Module**: Provides authentication services for all other modules
- **User Module**: Manages basic user profiles for all system users
- **Admin Module**: Enables SuperAdmins and Admins to manage organizations
- **Role Module**: Defines role-based access control across the system
- **Teacher Module**: Manages teacher profiles, subjects, and scheduling constraints
- **Manager Module**: Oversees teachers, students, and timetable generation
- **Student Module**: Handles student enrollment and schedule access
- **Subject Module**: Defines course subjects and their relationships
- **Class Module**: Manages class definitions and scheduling parameters
- **Room Module**: Tracks physical spaces and their availability
- **Team Module**: Groups users for collaborative purposes
- **Period Module**: Defines time slots for scheduling
- **Timetable Module**: Core AI-based scheduling engine
- **Rule Module**: Defines scheduling constraints and preferences
- **Calendar Module**: Manages academic calendars and special dates
- **Notification Module**: Handles system alerts and communications

## Each backend module has these packages:
- config
- constant
- controller
- dto
- entity
- exception
- model
- repository
- service
- util

## API Architecture
- RESTful API design with standardized endpoints
- JWT and OAuth2 authentication
- Role-Based Access Control (RBAC)
- Versioned API structure (v1)
- Secure HTTPS communication

## Database Design
- Relational database structure with PostgreSQL
- Consistent schema with standard fields:
    - id, uid, created_by, modified_by, created_date, modified_date, status_id
- NOT NULL constraints with default values for all columns
- Foreign key relationships for proper data integrity

## Frontend Architecture
- Feature-based organization
- Component-based UI with reusable elements
- BEM naming convention for CSS
- Responsive design with mobile-first approach
- Internationalization support
- Offline capabilities with Service Workers

## User Roles
1. **Super Admin**: Creates and manages Admin accounts, oversees all organizations
2. **Admin**: Manages multiple organizations, creates Manager accounts
3. **Manager**: Creates teacher and student accounts, manages timetable generation
4. **Sub-Manager**: Approves schedules and handles resource allocation
5. **Teacher**: Views schedules and submits preferences
6. **Student**: Views class timetables and receives notifications

## System Workflow
1. SuperAdmin creates Admins
2. Admins manage multiple Organizations
3. Managers create Teachers & Students
4. Editors fine-tune schedules and approve timetables
5. AI-Based Timetable generates optimized schedules
6. Notifications are sent for any update


# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/3.4.2/maven-plugin)
* [Create an OCI image](https://docs.spring.io/spring-boot/3.4.2/maven-plugin/build-image.html)
* [Spring Web](https://docs.spring.io/spring-boot/3.4.2/reference/web/servlet.html)
* [Spring Session](https://docs.spring.io/spring-session/reference/)
* [OAuth2 Client](https://docs.spring.io/spring-boot/3.4.2/reference/web/spring-security.html#web.security.oauth2.client)
* [Spring Data JPA](https://docs.spring.io/spring-boot/3.4.2/reference/data/sql.html#data.sql.jpa-and-spring-data)
* [JDBC API](https://docs.spring.io/spring-boot/3.4.2/reference/data/sql.html)
* [Thymeleaf](https://docs.spring.io/spring-boot/3.4.2/reference/web/servlet.html#web.servlet.spring-mvc.template-engines)
* [Spring Security](https://docs.spring.io/spring-boot/3.4.2/reference/web/spring-security.html)

### Guides
The following guides illustrate how to use some features concretely:

* [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/)
* [Serving Web Content with Spring MVC](https://spring.io/guides/gs/serving-web-content/)
* [Building REST services with Spring](https://spring.io/guides/tutorials/rest/)
* [Accessing Data with JPA](https://spring.io/guides/gs/accessing-data-jpa/)
* [Accessing Relational Data using JDBC with Spring](https://spring.io/guides/gs/relational-data-access/)
* [Managing Transactions](https://spring.io/guides/gs/managing-transactions/)
* [Accessing data with MySQL](https://spring.io/guides/gs/accessing-data-mysql/)
* [Handling Form Submission](https://spring.io/guides/gs/handling-form-submission/)
* [Securing a Web Application](https://spring.io/guides/gs/securing-web/)
* [Spring Boot and OAuth2](https://spring.io/guides/tutorials/spring-boot-oauth2/)
* [Authenticating a User with LDAP](https://spring.io/guides/gs/authenticating-ldap/)

### Maven Parent overrides

Due to Maven's design, elements are inherited from the parent POM to the project POM.
While most of the inheritance is fine, it also inherits unwanted elements like `<license>` and `<developers>` from the parent.
To prevent this, the project POM contains empty overrides for these elements.
If you manually switch to a different parent and actually want the inheritance, you need to remove those overrides.

